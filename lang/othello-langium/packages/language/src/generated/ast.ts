/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const OthelloTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type OthelloTerminalNames = keyof typeof OthelloTerminals;

export type OthelloKeywordNames =
    | "("
    | ")"
    | ","
    | "="
    | "black"
    | "board"
    | "c"
    | "captures_in_any_direction"
    | "cell"
    | "count_pieces_per_player"
    | "effect"
    | "end"
    | "flip_captured_stones"
    | "game"
    | "if"
    | "initial"
    | "move"
    | "pass"
    | "placement"
    | "players"
    | "position"
    | "r"
    | "rules"
    | "scoring"
    | "type"
    | "valid"
    | "when"
    | "white"
    | "x"
    | "{"
    | "}";

export type OthelloTokenNames = OthelloTerminalNames | OthelloKeywordNames;

export interface Board extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Board';
    columns: number;
    rows: number;
}

export const Board = {
    $type: 'Board',
    columns: 'columns',
    rows: 'rows'
} as const;

export function isBoard(item: unknown): item is Board {
    return reflection.isInstance(item, Board.$type);
}

export interface CellAssign extends langium.AstNode {
    readonly $container: Initial;
    readonly $type: 'CellAssign';
    color: 'black' | 'white';
    position: Position;
}

export const CellAssign = {
    $type: 'CellAssign',
    color: 'color',
    position: 'position'
} as const;

export function isCellAssign(item: unknown): item is CellAssign {
    return reflection.isInstance(item, CellAssign.$type);
}

export interface ConditionExpr extends langium.AstNode {
    readonly $container: EndRule | MoveRule;
    readonly $type: 'ConditionExpr';
    name: 'captures_in_any_direction';
}

export const ConditionExpr = {
    $type: 'ConditionExpr',
    name: 'name'
} as const;

export function isConditionExpr(item: unknown): item is ConditionExpr {
    return reflection.isInstance(item, ConditionExpr.$type);
}

export type EffectExpr = string;

export function isEffectExpr(item: unknown): item is EffectExpr {
    return typeof item === 'string';
}

export interface EndRule extends langium.AstNode {
    readonly $container: Rules;
    readonly $type: 'EndRule';
    condition: ConditionExpr;
}

export const EndRule = {
    $type: 'EndRule',
    condition: 'condition'
} as const;

export function isEndRule(item: unknown): item is EndRule {
    return reflection.isInstance(item, EndRule.$type);
}

export interface Game extends langium.AstNode {
    readonly $type: 'Game';
    board: Board;
    initial: Initial;
    name: string;
    players: Players;
    position: Position;
    rules: Rules;
}

export const Game = {
    $type: 'Game',
    board: 'board',
    initial: 'initial',
    name: 'name',
    players: 'players',
    position: 'position',
    rules: 'rules'
} as const;

export function isGame(item: unknown): item is Game {
    return reflection.isInstance(item, Game.$type);
}

export interface Initial extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Initial';
    cells: Array<CellAssign>;
}

export const Initial = {
    $type: 'Initial',
    cells: 'cells'
} as const;

export function isInitial(item: unknown): item is Initial {
    return reflection.isInstance(item, Initial.$type);
}

export interface MoveRule extends langium.AstNode {
    readonly $container: Rules;
    readonly $type: 'MoveRule';
    condition: ConditionExpr;
    effect: EffectExpr;
    type?: 'pass' | 'placement';
}

export const MoveRule = {
    $type: 'MoveRule',
    condition: 'condition',
    effect: 'effect',
    type: 'type'
} as const;

export function isMoveRule(item: unknown): item is MoveRule {
    return reflection.isInstance(item, MoveRule.$type);
}

export interface Player extends langium.AstNode {
    readonly $container: Players;
    readonly $type: 'Player';
    color: 'black' | 'white';
    name: string;
}

export const Player = {
    $type: 'Player',
    color: 'color',
    name: 'name'
} as const;

export function isPlayer(item: unknown): item is Player {
    return reflection.isInstance(item, Player.$type);
}

export interface Players extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Players';
    black: Player;
    white: Player;
}

export const Players = {
    $type: 'Players',
    black: 'black',
    white: 'white'
} as const;

export function isPlayers(item: unknown): item is Players {
    return reflection.isInstance(item, Players.$type);
}

export interface Position extends langium.AstNode {
    readonly $container: CellAssign | Game;
    readonly $type: 'Position';
    column: number;
    row: number;
}

export const Position = {
    $type: 'Position',
    column: 'column',
    row: 'row'
} as const;

export function isPosition(item: unknown): item is Position {
    return reflection.isInstance(item, Position.$type);
}

export interface Rules extends langium.AstNode {
    readonly $container: Game;
    readonly $type: 'Rules';
    end: EndRule;
    move: MoveRule;
    scoring: ScoringRule;
}

export const Rules = {
    $type: 'Rules',
    end: 'end',
    move: 'move',
    scoring: 'scoring'
} as const;

export function isRules(item: unknown): item is Rules {
    return reflection.isInstance(item, Rules.$type);
}

export type ScoringRule = string;

export function isScoringRule(item: unknown): item is ScoringRule {
    return typeof item === 'string';
}

export type OthelloAstType = {
    Board: Board
    CellAssign: CellAssign
    ConditionExpr: ConditionExpr
    EndRule: EndRule
    Game: Game
    Initial: Initial
    MoveRule: MoveRule
    Player: Player
    Players: Players
    Position: Position
    Rules: Rules
}

export class OthelloAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        Board: {
            name: Board.$type,
            properties: {
                columns: {
                    name: Board.columns
                },
                rows: {
                    name: Board.rows
                }
            },
            superTypes: []
        },
        CellAssign: {
            name: CellAssign.$type,
            properties: {
                color: {
                    name: CellAssign.color
                },
                position: {
                    name: CellAssign.position
                }
            },
            superTypes: []
        },
        ConditionExpr: {
            name: ConditionExpr.$type,
            properties: {
                name: {
                    name: ConditionExpr.name
                }
            },
            superTypes: []
        },
        EndRule: {
            name: EndRule.$type,
            properties: {
                condition: {
                    name: EndRule.condition
                }
            },
            superTypes: []
        },
        Game: {
            name: Game.$type,
            properties: {
                board: {
                    name: Game.board
                },
                initial: {
                    name: Game.initial
                },
                name: {
                    name: Game.name
                },
                players: {
                    name: Game.players
                },
                position: {
                    name: Game.position
                },
                rules: {
                    name: Game.rules
                }
            },
            superTypes: []
        },
        Initial: {
            name: Initial.$type,
            properties: {
                cells: {
                    name: Initial.cells,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        MoveRule: {
            name: MoveRule.$type,
            properties: {
                condition: {
                    name: MoveRule.condition
                },
                effect: {
                    name: MoveRule.effect
                },
                type: {
                    name: MoveRule.type
                }
            },
            superTypes: []
        },
        Player: {
            name: Player.$type,
            properties: {
                color: {
                    name: Player.color
                },
                name: {
                    name: Player.name
                }
            },
            superTypes: []
        },
        Players: {
            name: Players.$type,
            properties: {
                black: {
                    name: Players.black
                },
                white: {
                    name: Players.white
                }
            },
            superTypes: []
        },
        Position: {
            name: Position.$type,
            properties: {
                column: {
                    name: Position.column
                },
                row: {
                    name: Position.row
                }
            },
            superTypes: []
        },
        Rules: {
            name: Rules.$type,
            properties: {
                end: {
                    name: Rules.end
                },
                move: {
                    name: Rules.move
                },
                scoring: {
                    name: Rules.scoring
                }
            },
            superTypes: []
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new OthelloAstReflection();
